#!/bin/bash
#
# compute splitting from a flow model. this is a simplified version of predict_splitting and such
#
#

# Model working directory
model_dir=../cookbooks/2Dcartesian_convection    # where is sks_input.dat file?
cijkl_dir=$model_dir            # where is the Cijkl*.h5 file to be loaded? 
timestep=${2-0001} 		# Cijkl*.h5 file number with 4 digits: e.g. 40 must be 0040

avg=${4-0}			# 0: use true seismograms from reflectivity 
                                # 1: based on averaged tensors

mode=${5-0}			# 0: all layers 1: remove lithosphere 2: remove deep layers

bottom=400

verbose=${6-0}			# verbosity level
save_bascan=${7-1}		# save the actual back-azimuth dependence?
multi_cpu=${8-0}		# is this a multi cpu run, if so, how many? WARNING: need to clean up in this case since files
                                # will get appended rather than overridien
cpu_me=${9-1}                   # has to be within 0,...multi_cpu-1

idisp=15				  # way to compute splitting, 
                                          # 15: Levin and Park 1999
                                          # 25: Menke

varpar=0				  # depth variable parameters
density=3.353				  # reference density
incidence=5				  # incidence angle for SKS

lith_bot=100	 	     # calculate splitting due to layers below this depth everywhere if mode = 1 
execute=1		     # set to zero for debugging

#
# check for geodynamic model tensor files
#

if [ $multi_cpu -ne 0 ];then
    ((ncpu_m1 = multi_cpu-1))
    if [[ $cpu_me -lt 0 || $cpu_me -gt $ncpu_m1 ]];then
	echo $0: cpu_me $cpu_me out of bounds for multi_cpu $multi_cpu
	exit
    fi

fi

# current working directory
cwd=`pwd`
#
# Input directories with tensor files for each seismic station
#
# cijkl_dir=$wd
ss_dir=$cijkl_dir/seismic_stations/
echo $0: Model directory: $cijkl_dir
echo $0: Input directory: $ss_dir
mkdir -p $ss_dir
rm $ss_dir/*
#
# Output directory for splitting data
#
odir=$cijkl_dir/splitting
mkdir -p $odir
if [ $mode -ne 0 ];then		# if not all layers, indicate which depth mode
    odir=$odir/$mode
    if [ $mode -eq 1 ]; then
       odir=$odir/$lith_bot
    fi
    mkdir -p $odir
fi
rm $odir/*
echo $0: Output directory: $ss_dir
#
# temporary working directory
#
tmpd=~/tmp2
mkdir $tmpd
tmpn=$tmpd/t
trap "rm -rf $tmpd ; exit" 0 1 2 15

#Making vertical profile of the elastic tensors beneath each sesmic station
#Need to copy input.dat and savstack in the model directory

cp $model_dir/sks_input.dat $cijkl_dir
cp $cwd/savstack $cijkl_dir

cd $cijkl_dir
./savstack $mode $timestep 

mv seismic_station_*.sav seismic_stations/
mv Surface_coordinates.dat seismic_stations/
# mv seismic_station_*.sav $ss_dir
# mv Surface_coordinates.dat $ss_dir

cd $cwd

#
#Get number of seismic stations at the surface
#
ns=0;rm tmp2.d 2> /dev/null
for f in `ls $ss_dir/seismic_station_*.sav `;do
    ((ns=ns+1))
done
echo $0: Number of seismic stations being processes $ns

ncoord=`cat $ss_dir/Surface_coordinates.dat | gawk '{if(NR<2) print(NF)}'`
#if [ $ncoord -ne $ns ]; then
#    echo "$0: Number of x-z coordinates $ncoord different from number of seismic stations $ns"
#    exit
#fi
#
# don't change the naming convention here!!!
#
llfile=split.$mode.$timestep
if [ $mode -eq 1 ]; then
   llfile=split.$mode.$lith_bot.$timestep
fi
if [ $multi_cpu -eq 0 ];then	# clear

    if [ $avg -eq 0 ];then		# output files for average splitting parametes
	rm $odir/$llfile.sstat 2> /dev/null
    else
	rm $odir/$llfile.avg.sstat 2> /dev/null
    fi
    rm $odir/split.dat 2> /dev/null # remove old split files

fi
#
# Manage seismic stations among different cpus
#
if [ $multi_cpu -eq 0 ];then	# all tracers
    nstart=1;nstop=$ns 
else
    #
    # split things up for several CPUs
    #
    if [ $ns -lt $multi_cpu ];then
	echo $0: error, only $ns points for $multi_cpu CPUs
	exit
    fi
    gawk -v npoints=$ns -v m=$multi_cpu -f split_npoints_into_m.awk > $tmpn.splitn
    ((use_line=cpu_me+1))
    oneline $use_line $tmpn.splitn > $tmpn.nnuse
    read nstart nstop < $tmpn.nnuse
fi 

echo $0: CPU: $cpu_me working on $odir/$llfile, from $nstart to $nstop

t_dir=tensors 
mkdir -p $t_dir 2> /dev/null

###########################################################################
###########################################################################
###                                                                     ###
###                               MAIN LOOP                             ### 
###                                                                     ###
###########################################################################
###########################################################################

i=$nstart
while [ $i -le $nstop ];do		# loop through points
#i=96
echo $0:
echo $0: Seismic station $i

#tensor file
depths=`cat $ss_dir/seismic_station_$i.sav | gawk '{if(NR<2)printf($0)}'`
if [ $mode -eq 1 ];then
    echo $0: restricting depths to below $lith_bot km
    nl_above=`echo $depths $lith_bot | gawk '{for(i=1;i<=(NF-1);i++) if($i<=$NF) print(i)}'`
    nl_above=`echo $nl_above | gawk '{print($NF)}'`
    depths=`echo $depths $lith_bot | gawk '{for(i=1;i<=(NF-1);i++) if($i>$NF)printf("%s ",$i)}'`
    echo $0: Number of layers above the lithosphere $nl_above
elif [ $mode -eq 2 ];then
    echo $0: restricting depths to be above or equal to 250 km
    depths=`echo $depths | gawk '{for(i=1;i<=NF;i++)if($i<=250)printf("%s ",$i)}'`
fi

mid_bottom_layer=`echo $depths | gawk '{dx=($(NF)-$(NF-1))/2;print($NF+dx)}'`
echo $0: determined depths $depths mid bottom layer $mid_bottom_layer
      
# total thickness
layerd=`echo $depths | gawk '{print($NF)}'`
# number of layers
nl=`echo $depths | gawk '{print(NF)}'`
#d0=`echo $depths | gawk '{print($1)}'`
d0=`echo $depths | gawk '{print($1)}'`
#echo "$0: $d0"

if [ $varpar -eq 1 ];then	# PREM values
    # depth variable parameters
    densities=`echo $depths | readprem_z 2> /dev/null | gawk '{printf("%.4f ",$3/1000)}'`
    adens_avg=`echo $densities | gawk '{for(i=1;i<=NF;i++)print($i)}' | gawk -f mean.awk`
    density_bot=`echo $mid_bottom_layer | readprem_z 2> /dev/null | gawk '{printf("%.4f",$3/1000)}'`
    vp_bot=`echo $mid_bottom_layer | readprem_z 2> /dev/null | gawk '{printf("%.4f",$1/1000)}'`
    vs_bot=`echo $mid_bottom_layer | readprem_z 2> /dev/null | gawk '{printf("%.4f",$2/1000)}'`
else
    densities=`echo $nl | gawk '{for(i=1;i<=$1;i++)printf("%g ",d)}' d=$density`
    density_bot=3.513; vp_bot=8.809; vs_bot=4.734
    adens_avg=$density
fi

#echo $0: $densities
# sin(5deg)/v_s
rayp=`echo $incidence $vs_bot | gawk '{print(sin($1/57.2957795130823208)/$2)}'`
echo $0: working on $odir/$llfile, total number of $nl layers    
echo $0: depths: `echo $depths | gawk '{print($0)}'`
echo $0: vp_bpot $vp_bot  vs_bot: $vs_bot density_bot $density_bot layerd $layerd nl $nl rayp $rayp

cat $ss_dir/seismic_station_$i.sav > $tmpn.$i.sav
echo $0: tensor transfer done
#
# Generate tensors for each depth
#
rm $t_dir/* $tmpn.ttt 2> /dev/null
a=0;
if [ $mode -eq 1 ]; then
   a=$nl_above
fi
for d in $depths; do		
    ((a=$a+1))
    #echo $0:$a $nl_above
    tfile2=$t_dir/depth_`echo $d`.sav
    tfile=$t_dir/depth_`echo $d`.cijkl 
	
    rm $tfile $tfile2 tensor.dat 2> /dev/null
    if [ ! -s $tmpn.$i.sav ];then
        echo $0: error, tmp2 tensor $i not found
        exit
    fi
    cat $tmpn.$i.sav | gawk '{if(NR>1) print($'$a')}' > $tfile2
#gawk '{print($1,$2)}' $tfile2 >> $tmpn.ttt
    
    ./sav2cijkl $tfile2  $density 0 1 > $tfile 2> /dev/null
    
    if [ ! -s $tfile ];then
        echo $0: error 2
        exit
    fi
done
#Shifting all depths below lithosphere/slab by lith_bot/slab_bot, so the thickness in the anicake.F input file are real
Shift=0
if [ $mode -eq 1 ];then
    echo $0: restricting depths to below the slab              
    depths=`echo $depths $lith_bot | gawk '{for(i=1;i<=(NF-1);i++) if($i>$NF)printf("%s ",($i-$NF))}'`
    Shift=$lith_bot
fi
echo $0: $depths
#
# location
#
x=`cat $ss_dir/Surface_coordinates.dat | gawk 'NR==1{print($'$i')}'` # Surface_coordinates.dat`
z=`gawk '{if(NR==2) print($'$i')}' $ss_dir/Surface_coordinates.dat`
echo $0: working on seismic station $i at x = $x, z =  $z     
    
    if [ $execute -eq 1 ];then
	if [ $avg -eq 0 ];then
#
# compute splitting
#
            tfile3=$odir/split_`echo $i`.dat
	    rm $tfile3 2> /dev/null
	    az=0				# backazimuth loop
            while [ $az -gt -360 ];do
                echo $depths $densities $Shift | \
		    gawk -v tensor_dir=$t_dir  -v idisp=$idisp -v outfile=tmp2.dat \
		    -v density_bot=$density_bot -v vp_bot=$vp_bot -v vs_bot=$vs_bot \
		    -v rayp=$rayp -v az=$az -v bottom=$bottom -f produce_splitting_layersU.awk | \
		    ./anicake > /dev/null
		
		if [ $idisp -lt 10 ];then
		    exit
		fi
		cat tmp2.dat	| \
		    gawk '{a=$2;fa=$3-a;if(fa>90)fa-=180;if(fa<-90)fa+=180;\
           a+=360;if(a>360)a-=360;\
           dt=$4;misfit=$5;\
           if(dt != 0){
           fazi = 180 - fa;\
           if(fazi>=180)fazi-=180;\
           if(fazi<0)fazi+=180;\
           }else{fazi=0;};\
  	   #
           #Save data to split.dat
           #
           print(a,fazi,dt,misfit)}' >> $tfile3
	   tail -1 $tfile3  

		
		((az=az-5))
		#((az=az+20))
	    done
            
            # use only low error estimates
	    gawk '{if($4<0.5){print($0)}}' $tfile3 > tmp2; mv tmp2 $tfile3
	    rm tensor.dat $t_dir/*   tmp2.dat 2> /dev/null
	    
	else			# average
	    rm avg.sav 2> /dev/null
	    for d in $depths;do
		cat $t_dir/depth_`echo $d`.sav >> avg.sav
	    done
	    
	    echo $0: average tensor for nl $nl layerd $layerd
	    
	    gawk -f meanallcol.awk avg.sav > tmp2; mv tmp2 avg.sav
	    sav2splitting avg.sav 1 0 $layerd $adens_avg 0 0 0 2> /dev/null | gawk '{print($4,$5,$6,$7)}' > tmp2.dat
	    read mean_fazi std_fazi mean_dt std_dt < tmp2.dat
	    rm tmp2.dat avg.sav 
	fi
	
     #
     # output
     #
	if [ $avg -eq 0 ];then
	    #Number of good measuraments
	    ngood=`gawk 'END{print(NR)}' $tfile3`
            # statistics only if good measuraments
            #if [ $ngood -gt 0  ]; then
                echo $x $z `gawk '{print($1,$2,$3)}' $tfile3 | ./fazi2splitstat $ngood 2> /dev/null ` >> $odir/$llfile.sstat
	    #fi
            tail -1 $odir/$llfile.sstat
	    if [ $save_bascan -eq 1 ];then
	#	if [ ! -s $odir/$lon/ ];then
	#	    mkdir $odir/$lon/ 
	#	fi
	#	if [ ! -s $odir/$lon/$lat/ ];then
	#	    mkdir $odir/$lon/$lat/ 
	#	fi
	#	mv split.dat $odir/split.dat
		gzip -f $tfile3
		echo $0: written to $tfile3
	    else
		rm $tfile3
	    fi
	else
	    echo $lon $lat $mean_fazi $std_fazi $mean_dt $std_dt >> $odir/$llfile.avg.sstat
	    tail -1 $odir/$llfile.avg.sstat
	fi
    fi
	
    
    ((i=i+1))
done




